---
$schema: "https://json-schema.org/draft/2020-12/schema"
title: "Product Manifest for HPE CSM Install-Upgrade Framework (IUF)"
description: >
  A manifest that defines the behavior of the IUF when it performs operations
  against this product.


  This manifest file must be named iuf-product-manifest.yaml in the top level
  of the product release distribution in order for it to be discovered by the
  IUF.
# This is the version of the IUF manifest schema itself
version: 0.1.0
type: object
required:
- iuf_version
- name
# TODO: Generally would like this throughout all objects as it provides more
# guarantee of backwards compatibility of old manifests with newer schema.
#
# Using additionalProperties false helps ensure backwards compatibility of old
# IUF manifest files with newer schema versions because old manifest files will
# not be able to use additional properties which are then later added to the IUF
# manifest schema.
additionalProperties: false
properties:

  iuf_version:
    description: >
      The semantic version of the IUF with which this manifest file is expected
      to be compatible. Version constraints can be specified using ">", ">=",
      "==", "<", and "<=" comparison operators. Multiple comparison operators
      can be used to specify a range.


      Version constraints can also be specified with "~" (tilde) and "^" (caret)
      operators. A full version prefixed with "~" means that all versions with the
      same major and minor versions are compatible. That is, the patch version
      is allowed to differ. A full version prefixed with "^" means that all versions
      with the same major version are compatible. That is, the minor and patch
      versions are allowed to differ.


      It is recommended that products specify a caret range matching the
      current version of the IUF against which the manifest is developed. This
      will allow the manifest to continue working with new minor and patch
      versions of the IUF.
    type: string
    examples:
    - 1.0.0
    - ">= 1.0.0 < 2.0"
    - "< 2.0"
    - "~1.0.0"
    - "^1.0.0"

  name:
    description: >
      The abbreviated name of the product. This product name is the name under
      which the product will be uploaded to the product catalog.
    type: string
    examples:
    - cos
    - sat
    - analytics
    # TODO: Consider a regular expression for allowed product names
    # pattern: <regex in ECMA-262 regular expression dialect goes here>

  # TODO: Do we want a long name in a description too?
  description:
    description: >
      A description of the product.
    type: string

  version:
    description: >
      The version of the product. If not specified, the IUF will look for a
      file named ".version" in the top level of the release distribution
      directory.  If the version is not specified in the manifest, and there is
      no ".version" file, an attempt to install the product using the IUF will
      fail.

      It is recommended that products use a version string format which
      conforms to the Semantic Versioning 2.0.0 Spec. This does not require
      that the version numbers be assigned and incremented in accordance with
      the rules and requirements dictated by SemVer.

      If the product provides Ansible configuration content which is uploaded to a
      vcs repository (see the "vcs" property), then the version here must be a
      valid semantic version.
    type: string
    examples:
    - 2.4.76
    - 22.9.4
    - 1.3.0-rc.3
    - 2.5.8-20221004160837-9746d6e
    # If we can enforce that every product uses SemVer, then we can use the
    # following official regex from the FAQ on semver.org.
    # pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'


  # ===========================================================================
  # ================= Question for review session with teams ==================
  # ===========================================================================
  #
  # We are not providing a way to declare dependencies for the initial release
  # of the IUF in Alice. Do any product teams have examples of product install
  # dependencies, particularly in the install stages responsible for uploading
  # content, deploying services?
  #
  # ===========================================================================


  content:
    # TODO: Consider whether defaults can/should be specified at this level (in case content property is omitted)
    default:
      docker:
      - path: docker
    type: object
    description: >
      The content delivered by this product, including container images, RPMs,
      package repositories, helm charts, loftsman manifests, VCS repositories,
      IMS images and recipes, and S3 artifacts.

      Note that if the layout of the content is not specified in this manifest,
      the IUF will assume a default layout as defined in the property
      descriptions here.

      Any time a "relative path" is mentioned in the descriptions of properties
      beneath "content", it means a path relative to the top level of the
      product release distribution file.

    properties:
      docker:
        description: >
          An array of directories containing docker images that should be
          uploaded to the Docker image registry in Nexus at install/upgrade
          time.
        default:
        - path: "docker"
        type: array
        items:
          type: object
          required:
          - path
          properties:
            path:
              description: |
                The relative path to a directory containing the container
                images to be uploaded to the Docker image registry in Nexus.

                The directories contained within the directory specified here
                must contain container images. The container images will be
                uploaded to Nexus with names exactly matching the full path to
                the directory containing the image manifest.json file.

                For example, if this path contains the following file structure

                .
                |-- arti.hpc.amslabs.hpecorp.net
                    `-- my-container:1.2.4
                        |-- 1054448d81575250985471206b1c4654b0262d337f1a52ddac9a21208665656e
                        |-- ...
                        |-- manifest.json
                        `-- version

                A single container image would be uploaded to the Nexus Docker
                registry as arti.hpc.amslabs.hpecorp.net/my-container:1.2.4
              type: string

      helm:
        description: >
          An array of directories containing helm charts that should be
          uploaded to a Helm chart repository in Nexus at install/upgrade
          time.
        type: array
        default:
        - path: helm
        items:
          type: object
          required:
          - path
          properties:
            path:
              description: >
                The relative path to a directory containing the helm charts to
                be uploaded to a Helm chart repository in Nexus. The directory
                should contain Helm charts as gzipped tar files. The helm charts
                will be uploaded to the "charts" Helm chart repository in Nexus.
              type: string

      # =======================================================================
      # =============== Question for review session with teams ================
      # =======================================================================
      #
      # Will Loftsman manifests need a way to declare dependencies on other
      # Loftsman manifests, either within a single product or across products?
      #
      # Which teams use manifestgen, and which don't?
      #
      # Do any products provide Loftsman manifests that they don't want to
      # deploy as part of the product install and deployment? E.g. WLM?
      #
      # =======================================================================
      loftsman:
        description: >
          An array of Loftsman manifest files or directories containing Lofstman
          manifest files provided by the product.

          Loftsman manifests will be uploaded to S3 storage during the
          upload_content stage of the install/upgrade. They will be used from
          this S3 location during the deploy_manifests stage of the install.

          If the loftsman manifests are customized with the contents of
          customizations.yaml using manifestgen, then both the pre-customization
          and post-customization versions of the manifests will be stored in S3.
        type: array
        default:
        - path: manifests
          deploy: true
          manifestgen: true

        items:
          type: object
          required:
          - path
          properties:
            path:
              description: >
                The relative path to a loftsman manifest file or a directory
                containing multiple loftsman manifest files.
              type: string

            use_manifestgen:
              description: >
                Whether manifestgen needs to be called against the manifest(s).

                The manifestgen command applies values from customizations.yaml
                to the Loftsman manifest. These generally affect values in the
                Loftsman manifest file that are passed through to the Helm
                charts when they are deployed.
              type: boolean
              default: true
            deploy:
              description: >
                Whether this loftsman manifest should be deployed as part of the
                deploy_manifests stage of the IUF.
              type: boolean
              default: true

      # =======================================================================
      # =============== Question for review session with teams ================
      # =======================================================================
      #
      # Do any products currently have more than one "nexus-repositories.yaml"
      # file in their product stream?
      #
      # =======================================================================
      nexus_blob_stores:
        description: >
          The Nexus blob stores that should be defined for this product.
        type: object
        required:
        - yaml_path
        properties:
          yaml_path:
            description: >
              The relative path to a YAML file that defines the Nexus blob
              stores that should be created for this product. The YAML file
              should consist of a series of documents, each of which defines a
              blobstore.

              The schema of this file is unchanged from the Papaya recipe.
            type: string
            default: nexus-blobstores.yaml

      nexus_repositories:
        description: >
          The Nexus repositories that should be defined for this product.
        type: object
        required:
        - yaml_path
        properties:
          yaml_path:
            description: >
              The relative path to a YAML file that defines the Nexus
              repositories that should be created for this product. The YAML
              file should consist of a series of documents, each of which
              defines a Nexus repository.

              The schema of this file is unchanged from the Papaya recipe.
          type: string
          default: nexus-repositories.yaml

      rpms:
        description: >
          An array of directories containing RPMs that should be uploaded to the
          repositories defined by the "repositories_definition" property.
        type: array
        items:
          type: object
          required:
          - path
          - repository_name
          properties:
            path:
              description: >
                The path to a directory containing RPMs to upload to a package
                repository in Nexus, relative to the top level of the release
                distribution directory.
              type: string
            repository_name:
              description: >
                The name of the repository to which these RPMs should be uploaded.

                # TODO: Should we support product name and version substitutions
                # in this file at product install time? Currently, many products
                # do this sort of variable substitution at packaging time in
                # `release.sh` by templating their nexus-blobstores.yaml,
                # nexus-repositories.yaml, and their install.sh files using sed.
                # It would probably be simplest for Alice to just allow products
                # to keep managing those substitutions themselves.
                #
                # Decision: For Alice, we won't worry about this. Post-Alice, we
                # could offer release-generation libraries to simplify across
                # products.

      vcs:
        # TODO: Ask product teams if any product provides more than one VCS
        # repo.
        default: {}
        description: >
          Information about the VCS repository to be created for this product.
        type: object
        required:
        - path
        properties:
          path:
            description: >
              The path, relative to the top level of the product release
              distribution, to the directory containing the content to upload to
              a repository in VCS.
            type: string
          import_branch:
            description: >
              The branch name to which the content in the given path should be
              uploaded in VCS. If this is omitted, the default behavior is to upload
              to a path of the form cray/${PRODUCT_NAME}/${PRODUCT_VERSION} where
              PRODUCT_NAME and PRODUCT_VERSION are the name and version of the product,
              respectively. It is recommended not to change this value unless it is
              required to do so.
            type: string
          # The following property is one we want to allow the admin to
          # override. For Alice, let's not add this property. Let's just worry
          # about the content upload.
          site_branch:
            type: string
            description: >
              The branch name to use as the branch for site customizations.
              cpe-integration-22.09

      ims:
        description: >
          Information about the IMS images and/or recipes to be uploaded into
          IMS for this product.
        type: object
        properties:
          recipes:
            type: array
            items:
              type: object
              required:
              - path
              properties:
                path:
                  description: >
                    The path, relative to the top level of the product release
                    distribution, to the recipe as a gzipped tar file.

                    # TODO: Still trying to understand the structure here and
                    # how products will be able to build and package recipes.
                  type: string
                name:
                  description: >
                    Name of the recipe. Or we could default to the name of the tar file.
                  type: string
          images:
            type: array
            items:
              type: object
              required:
              - path
              properties:
                path:
                  description: >
                    The path, relative to the top level of the product release
                    distribution, to the directory containing the image artifacts.

                    # TODO: Still trying to understand the structure here and
                    # how products will be able to build and package images.
                  type: string
                name:
                  description: >
                    The name of the image to create.
                  type: string

      s3:
        description: TODO
