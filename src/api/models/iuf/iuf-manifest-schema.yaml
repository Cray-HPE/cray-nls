---
$schema: "https://json-schema.org/draft/2020-12/schema"
title: "Product Manifest for HPE CSM Install-Upgrade Framework (IUF)"
description: >
  A manifest that defines the behavior of the IUF when it performs operations
  against this product.
# This is the version of the schema itself
version: 0.1.0
type: object
required:
- schema_version
- name
# TODO: Generally would like this throughout all objects as it provides more
# guarantee of backwards compatibility of old manifests with newer schema.
additionalProperties: false
properties:

  schema_version:
    description: >
      The version of the IUF product manifest schema used by this manifest. The
      version of the schema should be a SemVer-like version number with three
      components, major.minor.patch.

      This version will be checked against the current schema version understood
      by the IUF.

      Compatibility is defined as follows. Let us refer to the schema version
      specified by the product manifest file as the "manifest version" and the
      current schema version used by the IUF as the "current version".


      - If the input version has an older major version than the current
        version, it is incompatible.

      - If the input version has an older minor version than the current
        version, it may be incompatible, but will be accepted with a warning.

      - If the input version has an older patch version than the current
        version, it is compatible.

      - If the input version is newer than the current version, it is
        incompatible because it could contain new fields not understood by the
        current version.

      - If the input version matches the current version, it is compatible.
    # TODO: Atif want to see this with a range, e.g. ^1.0.0 or ~1.0.0
    default: '1.0.0'
    type: string

  name:
    description: >
      The name of the product. This product name is the name under which the
      product will be uploaded to the product catalog.
    type: string
    # TODO: Do we want to define a regular expression for allowed product names
    # pattern: regex in ECMA-262 regular expression dialect goes here

  # TODO: Do we want a long name in a description too?
  description:
    description: >
      A longer name for the product. This is for humans to read and understand.
      E.g. slingshot-host-software could say what SHS stands for.
    type: string

  version:
    description: >
      The version of the product. The format of this version string must conform
      to the Semantic Versioning 2.0.0 Spec. The version numbers do not need to
      be assigned and incremented in accordance with the rules and requirements
      dictated by SemVer, however.

      # TODO: Consider whether we want to fall back on the `.version` file that some products
      # deliver in the release distribution tar file. E.g. Slurm provides one. We don't want
      # to make the build process more complicated. Or provide a path to the version file. In
      # this case, we could use a oneOf in the schema.

      # TODO: Need to look at SLE, CPE, and other products to see if they can fit into SemVer
      # Note that SemVer is pretty flexible (e.g. should be able to support SLE date strings).
      # Product like CPE already have to conform to use cray-import-config/cf-gitea-import
    type: string
    # This regex is the official one from the FAQ on semver.org
    pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'

  content:
    # TODO: Consider whether defaults can/should be specified at this level (in case content property is omitted)
    default:
      docker:
      - path: docker
        strip_leading_components: 0
    type: object
    description: >
      The content delivered by this product, including container images, RPMs,
      packages repositories, helm charts, loftsman manifests, VCS repositories,
      IMS images and recipes, and S3 artifacts.


      Note that if the layout of the content is not specified in this manifest,
      the IUF will assume a default layout as described in the properties here.

    properties:
      docker:
        description: >
          An array of directories containing docker images that should be
          uploaded to the Docker image registry in Nexus at install/upgrade
          time.

        default:
        - path: "docker"
        # TODO: do we want this as opposed to objects.
        # - "docker"

        type: array
        items:
          type: object
          required:
          - path
          properties:
            path:
              description: |
                The path, relative to the top level of the release distribution
                directory, containing the container images to be uploaded to the
                Docker image registry in Nexus.

                The directories contained within the directory specified here
                must contain container images. The container images will be
                uploaded to Nexus with names exactly matching the full path to
                the directory containing the image manifest.json file.

                For example, if this path contains the following file structure

                arti.hpc.amslabs.hpecorp.net/
                └── my-container:1.2.4
                    ├── 007c21b118030b56ce4c303c6ef668f6bdcf2e14f5e63f079b19e1d1883ac7a9
                    ├── ...
                    ├── manifest.json
                    └── version

                This container image would be uploaded to the Nexus registry as a
                arti.hpc.amslabs.hpecorp.net/my-container:1.2.4
              type: string

            # TODO: Do we need the ability to strip components from the path?
            # Maybe this needs a spike to see how product teams are storing their docker images.
            # E.g. SAT puts them all under cray/ prefix. COS mixes that approach with using
            # arti.hpc.../ prefix.
            # Maybe we don't need to worry about this. Make the product mirror the naming in the nexus
            # registry with their file structure.
            strip_leading_components:
              type: integer
              default: 0
              description: >
                How many leading components of the path should be stripped off when
                uploading the image to Nexus.

      helm:
        description: >
          An array of directories containing helm charts that should be
          uploaded to a Helm chart repository in Nexus at install/upgrade
          time.
        type: array
        default:
        - path: helm
          repository_name: charts
        # TODO: Consider simplifying this to just a list of strings like "docker" above
        # - "helm"
        items:
          type: object
          required:
          - path
          properties:
            path:
              description: >
                The path, relative to the top level of the release distribution
                directory, containing the helm charts to be uploaded to a Helm
                chart repository in Nexus.
              type: string

            # TODO: We can probably simplify here for now. Everybody is using "charts".
            # Putting charts in their own repository for each product is out of scope for IUF.
            # TODO: Investigate how loftsman knows which Helm repository to use from Nexus
            # Di says that loftsman needs local copies of the charts instead of going to Nexus.
            # We confirmed that loftsman uses local copies of charts (e.g. COS). File CASMTRIAGE for loftsman support of remote repos.
            repository_name:
              description: >
                The name of the repository to which the Helm charts should be
                uploaded in Nexus.
              type: string
              default: charts


      loftsman:
        description: >
          An array of Loftsman manifest files or directories containing Lofstman
          manifest files provided by the product.


          # TODO: Discuss with Atif where these manifests should be stored.
          # Also decide whether we store pre- or post-manifestgen versions.
          # This ties into the discussion about where we store hooks and any
          # artifacts needed for any future product install/upgrade/uninstall
          # operations.

          # TODO: Is there a need to specify dependencies here? Either within a
          # single product's Loftsman manifests or between products?
          # Discuss with Atif how dependencies are declared.
        type: array
        default:
        - path: manifests
          deploy: true
          manifestgen: true
        items:
          type: object
          required:
          - path
          properties:
            path:
              description: >
                The path to a loftsman manifest file or directory, relative to the top level
                of the release distribution directory.
              type: string

            # TODO: Consider whether dependencies between loftsman manifests are needed here
            # Jason suggests that perhaps they belong in a separate section.
            # Example schema below
            dependencies:
              type: array
              items:
                type: object
                properties:
                  product:
                    type: string
                    description: name of product
                  manifest_name:
                    type: string
                    description: name of manifest provided by product
            # End of example

            use_manifestgen:
              description: >
                Whether manifestgen needs to be called against the manifest(s).

                manifestgen takes the customizations.yaml file and applies the customizations
                to the Loftsman manifest file. Customizations to the manifest themselves or to
                to the values that are passed through to the helm charts.
              type: boolean
              # TODO: Is it more common that products require this or do not require it?
              # Is it harmless if they do not require it? Should be harmless.
              default: true
            deploy:
              description: >
                Whether this loftsman manifest should be deployed as part of the
                deploy_manifests stage of the IUF.

                # TODO: Reach out to David Gloe to ask for specifics on the WLM use case.
                # Why would we ever not want to deploy manifests during the deploy_manifests stage?
              type: boolean
              default: true

      blobstores_definition:
        description: >
          The path to a YAML file that defines the blobstores that should be
          created for this product. The YAML file should consist of a series
          documents, each of which defines a blobstore.

          The schema of each document is unchanged from the Papaya recipe
          release.
        type: string
        # TODO: Do any products define more than one blobstore?
        # It is possible to do this with a single nexus-blobstores.yaml file
        # by specifying multiple documents. Check if any products define multiple
        # blobstores in multiple files (possible SLE)
        default: nexus-blobstores.yaml

      repositories_definition:
        description: >
          The path to a YAML file that defines the Nexus repositories that
          should be create for this product. The YAML file should consist of a
          series of documents, each of which defines a Nexus repository.

          The schema of each document is unchanged from the Papaya recipe
          release.

          # TODO: Define behavior when repositories defined here already exist in Nexus.
          # Investigate why Slurm had to delete the old repos. Was it a way to ensure
          # the type is modified.
        type: string
        default: nexus-repositories.yaml

      rpms:
        description: >
          An array of directories containing RPMs that should be uploaded to the
          repositories defined by the "repositories_definition" property.
        type: array
        items:
          type: object
          required:
          - path
          properties:
            path:
              description: >
                The path to a directory containing RPMs to upload to a package
                repository in Nexus, relative to the top level of the release
                distribution directory.
              type: string
            repository_name:
              description: >
                The name of the repository to which these RPMs should be uploaded.

                # TODO: Should we support product name and version substitutions
                # in this file at product install time? Currently, many products
                # do this sort of variable substitution at packaging time in
                # `release.sh` by templating their nexus-blobstores.yaml,
                # nexus-repositories.yaml, and their install.sh files using sed.
                # It would probably be simplest for Alice to just allow products
                # to keep managing those substitutions themselves.

      # TODO: A repositories key would be an alternative way to specify the
      # Nexus repositories instead of having them defined in a separate file
      # referenced by the value of the "repositories_definition" property.
      # For example:
      #
      repositories:
        description: >
          A list of repositories.
        type: array
        items:
          type: object
          properties:
            name:
              description: The name of the repo to create
              type: string
            # More properties defining the repo would go here.

      # TODO: Similarly we could use a "blobstores" property instead of using
      # the "blobstores_definition" property.


      vcs:
        description: TODO

      ims:
        description: TODO

      s3:
        description: TODO
