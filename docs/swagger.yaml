#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
basePath: /apis/nls
definitions:
  ResponseError:
    properties:
      message:
        type: string
    type: object
  Workflow:
    properties:
      name:
        type: string
      targetNcn:
        type: string
    type: object
info:
  contact: {}
  description: |
    ## Security

    ### Authentication

    Similar to other exposed services, authentication is done by keycloak. Keycloak issued jwt token is verified and passed to API gateway.

    ### Routes/AuthZ

    Each route of these APIs are protected by configuring OPA policy.

    - **Crawl Phase**

      we will only `admin` and `user` roles. Users have `admin` role are allowed to invoke any APIs. Users with `user` role will only be able to call **GET** APIs.

    - **Walk Phase**

      we can introduce more granular permissions/roles based on future requirements.

    - **Run Phase**

      we can even go to resources level. For example, `User A` could have all permissions of `ceph nodes` but this user won't be able to rebuild/reboot any k8s nodes. `Monitoring User` can rerun/retry any failed rebuild/reboots but can't initiate such operation.

    ### Microservices

    The jwt token will be passed down to each microservices and individual microservice should enforce authZ in its own domain. Any credentials needed by each microservice should be obtained in a secure manner. SSH as root should be avoided if possible. However, there are certain operations requires root access via ssh. In those cases, we should use Vault to generate one time, short lived temporary SSH keys. Note that these goals will be achieved phase by phase.

    - **Crawl Phase**

      In crawl phase, we execute steps almost identical to what we have today. Most steps need direct root access via SSH. SSH credentials are mounted onto each short lived _Job Pods_ as `hostPath`. JWT tokens needed for other microservice calls are obtained from `ncn-m001` over SSH:

      ```
      export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
       -d client_id=admin-client \
       -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
       https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
      ```

      > NOTE: This is exactly what our 1.0.x and 1.2.x does

    - **Walk Phase**

      - SSH credentials need to be controlled by Vault and only one time credentials should be used
      - JWT token should be passed from API gateway instead of getting it from `ncn-m001` as root user
      - Any steps can be performed by make REST/gRPC request to a microservice should not use SSH any more

    - **Run Phase**

      Each microservice should implement it's own granular/resources level authZ

    ### Logging/Audit

    - **Request info**

      API Gateway should log user information from validated JWT token so we know "who did what at when". Each microservice should also log the same information. Additionally, a unique request id should be passed/logged as well such that we can track a request in every microservice. Note that this is slightly different than what istio tracking is because of async operations. It won't carry istio injected `x-b3-traceid` in some cases.

      Required fields:

      - User Info: `name/id/email`, `roles`
      - HTTP path: `REST API URI`
      - HTTP method: `GET|POST|PUT|DELETE`
      - Resources list: `ncn-w001,ncn-w002...`
      - Operation Result: `failed|succeed|terminated`

    - **Operation logs**

      Each steps of automation should be logged in order to troubleshoot/audit what exactly happened on ncn(s). This is done by _Argo Workflow_ engine.

    ---

    [API Doc](swagger.md)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: NCN Lifecycle Management API
  version: "1.0"
paths:
  /v1/ncns/{hostname}/reboot:
    post:
      consumes:
      - application/json
      parameters:
      - description: hostname
        in: path
        name: hostname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: End to end reboot of a single ncn
      tags:
      - NCNs
  /v1/ncns/{hostname}/rebuild:
    post:
      consumes:
      - application/json
      parameters:
      - description: hostname
        in: path
        name: hostname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Workflow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - OAuth2Application:
        - admin
      summary: End to end rebuild of a single ncn
      tags:
      - NCNs
  /v1/workflows:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
        - read
      summary: Get status of a ncn workflow
      tags:
      - Workflow
  /v1/workflows/{name}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: name of workflow
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: Delete a ncn workflow
      tags:
      - Workflow
  /v1/workflows/{name}/rerun:
    put:
      consumes:
      - application/json
      parameters:
      - description: name of workflow
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: Rerun a workflow, all steps will run
      tags:
      - Workflow
  /v1/workflows/{name}/retry:
    put:
      consumes:
      - application/json
      parameters:
      - description: name of workflow
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: Retry a failed ncn workflow, skip passed steps
      tags:
      - Workflow
  /v2/ncn:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: Add a ncn
      tags:
      - V2 NCN
  /v2/ncns/{hostname}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: hostname
        in: path
        name: hostname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: Remove a ncn
      tags:
      - V2 NCN
  /v2/ncns/hooks:
    get:
      consumes:
      - application/json
      parameters:
      - description: filter
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: Get ncn lifecycle hooks
      tags:
      - V2 NCN Hooks
  /v2/ncns/hooks/{hook_name}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: hook_name
        in: path
        name: hook_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: Remove a ncn lifecycle hook
      tags:
      - V2 NCN Hooks
  /v2/ncns/hooks/before-k8s-drain:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: Add additional steps before k8s drain
      tags:
      - V2 NCN Hooks
  /v2/ncns/hooks/before-wipe:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: Add additional steps before wipe a ncn
      tags:
      - V2 NCN Hooks
  /v2/ncns/hooks/post-boot:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: Add additional steps after a ncn boot(reboot)
      tags:
      - V2 NCN Hooks
  /v2/ncns/reboot:
    post:
      consumes:
      - application/json
      parameters:
      - description: hostnames to include
        in: body
        name: include
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: End to end rolling reboot ncns
      tags:
      - V2 NCNs
  /v2/ncns/rebuild:
    post:
      consumes:
      - application/json
      parameters:
      - description: hostnames to include
        in: body
        name: include
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "501":
          description: Not Implemented
      security:
      - OAuth2Application:
        - admin
      summary: End to end rolling rebuild ncns
      tags:
      - V2 NCNs
securityDefinitions:
  OAuth2Application:
    flow: application
    scopes:
      admin: '                             Grants read and write access to administrative
        information'
      read: '                              Grants read access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
tags:
- description: |
    > > > > #### End to end rebuild/reboot of a single ncn node
  name: NCNs
- description: |
    > > > #### Workflow management
  name: Workflow
