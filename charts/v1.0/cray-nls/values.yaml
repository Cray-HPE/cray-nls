#
# MIT License
#
# (C) Copyright [2022-2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
global:
  appVersion: 0.0.1

argo-host: cray-nls.argo.svc:80

ingress:
  enabled: true

externalHostname: argo.local

cray-service:
  type: "Deployment"
  nameOverride: "cray-nls"
  fullnameOverride: "cray-nls"
  priorityClassName: csm-high-priority-service
  replicaCount: 3
  volumes:
    - name: worker-rebuild-workflow-files
      configMap:
        name: worker-rebuild-workflow-files
    - name: storage-rebuild-workflow-files
      configMap:
        name: storage-rebuild-workflow-files
    - name: iuf-install-workflow-files
      configMap:
        name: iuf-install-workflow-files
    - name: iuf-install-workflow-stages-files
      configMap:
        name: iuf-install-workflow-stages-files
    - name: iuf
      hostPath:
        path: /etc/cray/upgrade/csm
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
  strategy:
    rollingUpdate:
      maxUnavailable: 50%
    type: RollingUpdate
  etcdCluster:
    enabled: false
    tls:
      enabled: false
  initContainers:
    wait-for-argo-server:
      name: "wait-for-argo-server"
      image:
        repository: artifactory.algol60.net/csm-docker/stable/docker.io/curlimages/curl
        tag: 7.80.0
      pullPolicy: IfNotPresent
      command:
        - /bin/sh
        - -c
        - while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://argo-server-internal.argo.svc.cluster.local:2746)" != "200" ]]; do echo "Waiting for argo server"; sleep 3;  done; echo "Argo Server is UP";

  containers:
    cray-nls:
      volumeMounts:
        - name: worker-rebuild-workflow-files
          readOnly: true
          mountPath: /workflows/worker/ncn
        - name: storage-rebuild-workflow-files
          readOnly: true
          mountPath: /workflows/storage/ncn
        - name: iuf-install-workflow-files
          readOnly: true
          mountPath: /workflows/iuf
        - name: iuf-install-workflow-stages-files
          readOnly: true
          mountPath: /workflows/iuf/stages
        - name: iuf
          mountPath: /etc/cray/upgrade/csm
      name: "cray-nls"
      image:
        repository: artifactory.algol60.net/csm-docker/stable/cray-nls
        tag: 0.9.18-debug2
      resources:
        limits:
          cpu: 1
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 256Mi
      env:
        - name: ARGO_TOKEN
          valueFrom:
            secretKeyRef:
              name: argo-server-secret
              key: token
        - name: SERVER_PORT
          value: "3000"
        - name: ENV
          value: production
        - name: GIN_MODE
          value: release
        - name: ARGO_SERVER_URL
          value: argo-server-internal.argo.svc.cluster.local:2746
        - name: API_GATEWAY_URL
          value: https://api-gw-service-nmn.local
        - name: WORKER_REBUILD_WORKFLOW_FILES
          value: "/workflows/worker"
        - name: STORAGE_REBUILD_WORKFLOW_FILES
          value: "/workflows/storage"
        - name: IUF_INSTALL_WORKFLOW_FILES
          value: "/workflows/iuf"
        - name: MEDIA_DIR_BASE
          value: "/etc/cray/upgrade/csm"
      ports:
        - name: http
          containerPort: 3000
      livenessProbe:
        httpGet:
          port: 3000
          path: /apis/nls/v1/liveness
        initialDelaySeconds: 5
        periodSeconds: 3
      readinessProbe:
        httpGet:
          port: 3000
          path: /apis/nls/v1/readiness
        initialDelaySeconds: 20
        periodSeconds: 60
  sqlCluster:
    enabled: false
  ingress:
    gateways:
      - "services/services-gateway"
      - "services/customer-admin-gateway"
    enabled: true
    prefix: /apis/nls
    uri: /apis/nls

cray-service-pg-only:
  type: ""
  nameOverride: "cray-nls"
  service:
    enabled: false
  etcdCluster:
    enabled: false
    tls:
      enabled: false
  sqlCluster:
    enabled: true
    tls:
      enabled: false
    waitForItJob: false
    users:
      argouser: []
    databases:
      argo: argouser
    backup:
      enabled: true
      # Once per day at 11:10 pm
      schedule: "10 23 * * *"

# argo workflow
argo-workflows:
  useDefaultArtifactRepo: true
  useStaticCredentials: true
  artifactRepository:
    archiveLogs: true
    s3:
      bucket: config-data
      keyFormat: "{{workflow.namespace}}/{{workflow.name}}/{{pod.name}}"
      endpoint: rgw-vip.nmn:8080
      insecure: true
      accessKeySecret:
        name: config-data-s3-credentials
        key: access_key
      secretKeySecret:
        name: config-data-s3-credentials
        key: secret_key
  workflow:
    workflowNamespaces:
      - argo
  executor:
    image:
      # -- Registry to use for the controller
      registry: artifactory.algol60.net/csm-docker/stable
      # -- Registry to use for the controller
      repository: quay.io/argoproj/argoexec
      tag: v3.3.6
  server:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - argo-workflows-server
            topologyKey: kubernetes.io/hostname
    replicas: 3
    image:
      # -- Registry to use for the controller
      registry: artifactory.algol60.net/csm-docker/stable
      # -- Registry to use for the controller
      repository: quay.io/argoproj/argocli
      tag: v3.3.6
    pdb:
      enabled: true
      minAvailable: 1
    extraArgs:
      - --auth-mode=server
      - --namespaced
  controller:
    image:
      # -- Registry to use for the controller
      registry: artifactory.algol60.net/csm-docker/stable
      # -- Registry to use for the controller
      repository: quay.io/argoproj/workflow-controller
      # -- Overrides the image tag whose default is the chart appVersion.
      tag: v3.3.6
    replicas: 2
    pdb:
      enabled: true
      minAvailable: 1
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            preference:
              matchExpressions:
                - key: node-role.kubernetes.io/master
                  operator: Exists
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - argo-workflows-workflow-controller
    persistence:
      postgresql:
        host: cray-nls-postgres
        port: 5432
        database: argo
        tableName: argo_workflows
        # the database secrets must be in the same namespace of the controller
        userNameSecret:
          name: argouser.cray-nls-postgres.credentials
          key: username
        passwordSecret:
          name: argouser.cray-nls-postgres.credentials
          key: password
