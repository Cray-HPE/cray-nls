#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: ncn-lifecycle-rebuild-
  # labels:
  #   targetNcn: {{.TargetNcn}}
spec:
  podGC:
    # Pod GC strategy must be one of the following:
    # * OnPodCompletion - delete pods immediately when pod is completed (including errors/failures)
    # * OnPodSuccess - delete pods immediately when pod is successful
    # * OnWorkflowCompletion - delete pods when workflow is completed
    # * OnWorkflowSuccess - delete pods when workflow is successful
    strategy: OnPodCompletion
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: NotIn
            values:
            {{- range $index,$value := .TargetNcns }}
            - {{$value -}}
            {{- end }}
  entrypoint: main
  templates:
    - name: main
      dag:
        tasks:
          {{- range $index,$value := .TargetNcns }}
          # drain: sync
          - name: drain-{{$value}}
            template: drain
            arguments:
              parameters:
              - name: workflowtemplate
                value: "ssh-with-kubeconfig"
              - name: targetNcn
                value: {{$value}}
              - name: dryRun
                value: true
          # reboot: parallel
          - name: reboot-{{$value}}
            dependencies:
              - "drain-{{$value}}"
            template: reboot
            arguments:
              parameters:
              - name: workflowtemplate
                value: "ssh-with-kubeconfig"
              - name: targetNcn
                value: {{$value}}
              - name: dryRun
                value: true
          {{- end }}
    - name: drain
      synchronization:
        mutex:
          name: drain
      inputs:
        {{- include "worker.common.parameters" . | indent 8 }}
      resource:
        action: create
        manifest: |
          {{- include "worker.drain" . | indent 10 }}
        successCondition: status.phase == Succeeded
        failureCondition: status.phase in (Failed, Error)
    - name: reboot
      inputs:
        {{- include "worker.common.parameters" . | indent 8 }}
      resource:
        action: create
        manifest: |
          {{- include "worker.reboot" . | indent 10 }}
        successCondition: status.phase == Succeeded
        failureCondition: status.phase in (Failed, Error)
