#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: ncn-lifecycle-rebuild-
  # labels:
  #   targetNcn: {{.TargetNcn}}
spec:
  volumes:
    - name: ssh
      hostPath:
        path: /root/.ssh
        type: Directory
    - name: podinfo
      downwardAPI:
        items:
          - path: "labels"
            fieldRef:
              fieldPath: metadata.labels
          - path: "annotations"
            fieldRef:
              fieldPath: metadata.annotations
  # schedule workflow jobs asap
  priorityCLassName: system-node-critical
  # Pod GC strategy must be one of the following:
  # * OnPodCompletion - delete pods immediately when pod is completed (including errors/failures)
  # * OnPodSuccess - delete pods immediately when pod is successful
  # * OnWorkflowCompletion - delete pods when workflow is completed
  # * OnWorkflowSuccess - delete pods when workflow is successful
  podGC:
    strategy: OnPodCompletion
  # allow workflow jobs running on master node
  #   we may have a situation that all worker nodes
  #   are marked as "being rebuilt" (cray.nls=ncn-w001)
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
  affinity:
    nodeAffinity:
      # avoid putting workflow jobs onto workers that will be rebuilt
      # this label is set onto each workers at beginning of workflow
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: cray.nls
            operator: NotIn
            values:
            {{- range $index,$value := .TargetNcns }}
            - {{$value -}}
            {{- end }}
      # avoid using master node to run workflow jobs as soon as 
      # we have worker nodes available
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 50
          preference:
            matchExpressions:
            - key: node-role.kubernetes.io/master
              operator: DoesNotExist
  entrypoint: main
  templates:
    - name: main
      dag:
        tasks:
          {{- range $index,$value := .TargetNcns }}
          - name: add-labels-{{$value}}
            template: add-labels
            arguments: 
              parameters:
              - name: targetNcn
                value: {{$value}}
          # drain: sync
          #     Only one worker can be drained at a time
          - name: drain-{{$value}}
            template: drain
            dependencies:
              - add-labels-{{$value}}
              # each drain depends on previous drain action
              # so we make sure only one node is drained at a time
              {{ if ne $index 0 }}
              - drain-{{ index $.TargetNcns (add $index -1) }}
              {{ end }}
            arguments:
              parameters:
              - name: targetNcn
                value: {{$value}}
              - name: dryRun
                value: "{{$.DryRun}}"
          # wipe and reboot: parallel
          #     once a worker node is drained from k8s
          #     we can safely wipe and reboot this node
          #     regardless of what state other nodes are
          - name: wipe-and-reboot-{{$value}}
            dependencies: 
              - drain-{{$value}}
            template: wipe-and-reboot
            arguments:
              parameters:
              - name: targetNcn
                value: {{$value}}
              - name: dryRun
                value: "{{$.DryRun}}"
          # post rebuild: parallel
          #     Post rebuild validation can be run in parallel
          - name: post-rebuild-{{$value}}
            dependencies: 
              - wipe-and-reboot-{{$value}}
            template: post-rebuild
            arguments:
              parameters:
              - name: targetNcn
                value: {{$value}}
              - name: dryRun
                value: "{{$.DryRun}}"
          {{- end }}
    # reference to individual tasks
    - name: add-labels
      inputs:
        parameters:
          - name: targetNcn
      resource:
        action: patch
        mergeStrategy: json
        flags:
          - "node"
          - "{{ `{{inputs.parameters.targetNcn}}` }}"
        manifest: |
          - op: add
            path: /metadata/labels/cray.nls
            value: {{ `{{inputs.parameters.targetNcn}}` }}
    - name: remove-labels
      inputs:
        parameters:
          - name: targetNcn
      resource:
        action: patch
        mergeStrategy: json
        flags:
          - "node"
          - "{{ `{{inputs.parameters.targetNcn}}` }}"
        manifest: |
          - op: remove
            path: /metadata/labels/cray.nls
    - name: drain
      inputs:
        {{- include "worker.common.parameters" . | indent 8 }}
      dag:
        {{- include "worker.drain" . | indent 8 }}
    - name: wipe-and-reboot
      inputs:
        {{- include "worker.common.parameters" . | indent 8 }}
      dag:
        {{- include "worker.wipe-and-reboot" . | indent 8 }}
    - name: post-rebuild
      inputs:
        {{- include "worker.common.parameters" . | indent 8 }}
      dag:
        {{- include "worker.post-rebuild" . | indent 8 }}
