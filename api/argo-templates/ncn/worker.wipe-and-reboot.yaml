#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
{{define "worker.wipe-and-reboot"}}
tasks:
  - name: "cleanup-state-file"
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            mv /etc/cray/upgrade/csm/{{ `{{inputs.parameters.targetNcn}}` }}/state \
                /etc/cray/upgrade/csm/{{ `{{inputs.parameters.targetNcn}}` }}/state.bak || true
  - name: "wipe-and-reboot"
    dependencies:
      - cleanup-state-file
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            NONINTERACTIVE=1 \
              /usr/share/doc/csm/upgrade/1.2/scripts/common/ncn-rebuild-common.sh \
              {{ `{{inputs.parameters.targetNcn}}` }} --rebuild
  # - name: "validate-bss-ntp"
  #   templateRef:
  #     name: ssh-with-kubeconfig
  #     template: bash-script-example
  #   arguments:
  #     parameters:
  #       - name: dryRun
  #         value: "{{ `{{inputs.parameters.dryRun}}` }}"
  #       - name: scriptContent
  #         value: |
  #           TARGET_XNAME=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ `{{inputs.parameters.targetNcn}}` }} 'cat /etc/cray/xname')
  #           TARGET_NCN={{ `{{inputs.parameters.targetNcn}}` }}

  #           if ! cray bss bootparameters list --hosts $TARGET_XNAME --format json | jq '.[] |."cloud-init"."user-data".ntp' | grep -q '/etc/chrony.d/cray.conf'; then
  #             echo "${TARGET_NCN} is missing NTP data in BSS. Please see the procedure which can be found in the 'Known Issues and Bugs' section titled 'Fix BSS Metadata' on the 'Configure NTP on NCNs' page of the CSM documentation."
  #             exit 1
  #           fi
  # - name: "wipe-node-disk"
  #   templateRef:
  #     name: ssh-with-kubeconfig
  #     template: bash-script-example
  #   arguments:
  #     parameters:
  #       - name: dryRun
  #         value: "{{ `{{inputs.parameters.dryRun}}` }}"
  #       - name: scriptContent
  #         value: |
  #           TARGET_NCN={{ `{{inputs.parameters.targetNcn}}` }}

  #           cat <<'EOF' > wipe_disk.sh
  #             lsblk | grep -q /var/lib/sdu
  #             sdu_rc=$?
  #             vgs | grep -q metal
  #             vgs_rc=$?
  #             set -e
  #             systemctl disable kubelet.service || true
  #             systemctl stop kubelet.service || true
  #             systemctl disable containerd.service || true
  #             systemctl stop containerd.service || true
  #             umount /var/lib/containerd /var/lib/kubelet || true
  #             if [[ "$sdu_rc" -eq 0 ]]; then
  #               umount /var/lib/sdu || true
  #             fi
  #             for md in /dev/md/*; do mdadm -S $md || echo nope ; done
  #             if [[ "$vgs_rc" -eq 0 ]]; then
  #               vgremove -f --select 'vg_name=~metal*' || true
  #               pvremove /dev/md124 || true
  #             fi
  #             wipefs --all --force /dev/sd* /dev/disk/by-label/* || true
  #             sgdisk --zap-all /dev/sd*
  #           EOF
            
  #           chmod +x wipe_disk.sh
  #           scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null wipe_disk.sh $TARGET_NCN:/tmp/wipe_disk.sh
  #           ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $TARGET_NCN '/tmp/wipe_disk.sh'
  # - name: "pxe-boot-node"
  #   templateRef:
  #     name: ssh-with-kubeconfig
  #     template: bash-script-example
  #   arguments:
  #     parameters:
  #       - name: dryRun
  #         value: "{{ `{{inputs.parameters.dryRun}}` }}"
  #       - name: scriptContent
  #         value: |
  #           TARGET_XNAME=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ `{{inputs.parameters.targetNcn}}` }} 'cat /etc/cray/xname')
  #           TARGET_NCN={{ `{{inputs.parameters.targetNcn}}` }}
  #           TARGET_MGMT_XNAME=$(curl -s -k -H "Authorization: Bearer ${TOKEN}" "https://api-gw-service-nmn.local/apis/sls/v1/search/hardware?extra_properties.Role=Management" | \
  #             jq -r ".[] | select(.ExtraProperties.Aliases[] | contains(\"$TARGET_NCN\")) | .Parent")

  #           TARGET_NCN_mgmt_host="${TARGET_NCN}-mgmt"
  #           if [[ ${TARGET_NCN} == "ncn-m001" ]]; then
  #               TARGET_NCN_mgmt_host=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ncn-m001 "ipmitool lan print | grep 'IP Address' | grep -v 'Source'"  | awk -F ": " '{print $2}')
  #           fi
  #           echo "mgmt IP/Host: ${TARGET_NCN_mgmt_host}"

  #           # retrieve IPMI username/password from vault
  #           VAULT_TOKEN=$(kubectl get secrets cray-vault-unseal-keys -n vault -o jsonpath={.data.vault-root} | base64 -d)
  #           # Make sure we got a vault token
  #           [[ -n ${VAULT_TOKEN} ]]

  #           # During worker upgrades, one vault pod might be offline, so we look for one that works.
  #           # List names of all Running vault pods, grep for just the cray-vault-# pods, and try them in
  #           # turn until one of them has the IPMI credentials.
  #           IPMI_USERNAME=""
  #           IPMI_PASSWORD=""
  #           for VAULT_POD in $(kubectl get pods -n vault --field-selector status.phase=Running --no-headers \
  #                               -o custom-columns=:.metadata.name | grep -E "^cray-vault-(0|[1-9][0-9]*)$") ; do
  #               IPMI_USERNAME=$(kubectl exec -it -n vault -c vault ${VAULT_POD} -- sh -c \
  #                   "export VAULT_ADDR=http://localhost:8200; export VAULT_TOKEN=`echo $VAULT_TOKEN`; \
  #                   vault kv get -format=json secret/hms-creds/$TARGET_MGMT_XNAME" | 
  #                   jq -r '.data.Username')
  #               # If we are not able to get the username, no need to try and get the password.
  #               [[ -n ${IPMI_USERNAME} ]] || continue
  #               export IPMI_PASSWORD=$(kubectl exec -it -n vault -c vault ${VAULT_POD} -- sh -c \
  #                   "export VAULT_ADDR=http://localhost:8200; export VAULT_TOKEN=`echo $VAULT_TOKEN`; \
  #                   vault kv get -format=json secret/hms-creds/$TARGET_MGMT_XNAME" | 
  #                   jq -r '.data.Password')
  #               break
  #           done
  #           # Make sure we found a pod that worked
  #           [[ -n ${IPMI_USERNAME} ]]
            
  #           # Set ncn to pxe boot
  #           ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H $TARGET_NCN_mgmt_host chassis bootdev pxe options=efiboot

{{end}}