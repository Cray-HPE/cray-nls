#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
{{define "worker.drain"}}
tasks:
  - name: wait-for-cfs
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            /usr/share/doc/csm/upgrade/1.2/scripts/cfs/wait_for_configuration.sh \
              --xnames \
              $(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ `{{inputs.parameters.targetNcn}}` }} 'cat /etc/cray/xname')
  - name: ensure-etcd-pods
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            export GOSS_BASE=/opt/cray/tests/install/ncn
            GOSS_ARG="--vars=/opt/cray/tests/install/ncn/vars/variables-ncn.yaml validate \
              --retry-timeout 1h \
              --sleep 1m"

            goss -g /opt/cray/tests/install/ncn/tests/goss-cray-service-etcd-health-check.yaml  ${GOSS_ARG}
  - name: ensure-pg-pods
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            export GOSS_BASE=/opt/cray/tests/install/ncn
            GOSS_ARG="--vars=/opt/cray/tests/install/ncn/vars/variables-ncn.yaml validate \
              --retry-timeout 1h \
              --sleep 1m"
            
            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-leader.yaml ${GOSS_ARG}

            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-clusters-running.yaml ${GOSS_ARG}

            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-pods-running.yaml ${GOSS_ARG}

            goss -g /opt/cray/tests/install/ncn/tests/goss-k8s-postgres-replication-lag.yaml ${GOSS_ARG}
  - name: drain
    dependencies:
      - wait-for-cfs
      - ensure-etcd-pods
      - ensure-pg-pods
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            kubectl get node {{ `{{inputs.parameters.targetNcn}}` }} || res=$?
            # only delete a ncn that exists in cluster
            if [[ $res -eq 0 ]]; then
              export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
              -d client_id=admin-client \
              -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
              https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
              csi automate ncn kubernetes --action delete-ncn --ncn {{ `{{inputs.parameters.targetNcn}}` }} --kubeconfig /etc/kubernetes/admin.conf
            fi
  - name: update-bss
    dependencies:
      - wait-for-cfs
      - ensure-etcd-pods
      - ensure-pg-pods
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
            -d client_id=admin-client \
            -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
            https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
            csi handoff bss-update-param --set metal.no-wipe=0 --limit $(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ `{{inputs.parameters.targetNcn}}` }} 'cat /etc/cray/xname')
{{end}}