#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
{{define "worker.drain"}}
tasks:
  - name: wait-for-cfs
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            /usr/share/doc/csm/upgrade/1.2/scripts/cfs/wait_for_configuration.sh \
              --xnames \
              $(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ `{{inputs.parameters.targetNcn}}` }} 'cat /etc/cray/xname')
  - name: ensure-nexus-can-start-on-any-node
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            workers="$(kubectl get node --selector='!node-role.kubernetes.io/master' -o name | sed -e 's,^node/,,' | paste -sd,)"
            export PDSH_SSH_ARGS_APPEND="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
            kubectl get configmap -n nexus cray-precache-images -o json | jq -r '.data.images_to_cache' | while read image; do echo >&2 "+ caching $image"; pdsh -w "$workers" "crictl pull $image" 2>/dev/null; done
  - name: ensure-etcd-pods
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            while [[ "$(kubectl get po -A -l 'app=etcd' | grep -v "Running"| wc -l)" != "1" ]]; do
                echo "Some etcd pods are not in running state, wait for 5s ..."
                kubectl get po -A -l 'app=etcd' | grep -v "Running"
                sleep 5
            done
            etcdClusters=$(kubectl get Etcdclusters -n services | grep "cray-"|awk '{print $1}')
            for cluster in $etcdClusters
            do
                numOfPods=$(kubectl get pods -A -l 'app=etcd'| grep $cluster | grep "Running" | wc -l)
                if [[ $numOfPods -ne 3 ]];then
                    echo "ERROR - Etcd cluster: $cluster should have 3 pods running but only $numOfPods are running"
                    exit 1
                fi
            done
  - name: ensure-pg-pods
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            wget -q http://rgw-vip.nmn/ncn-utils/csi;chmod 0755 csi
            mv csi /usr/local/bin/csi
            csi pit validate --postgres
  - name: drain
    dependencies:
      - wait-for-cfs
      - ensure-nexus-can-start-on-any-node
      - ensure-etcd-pods
      - ensure-pg-pods
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
            -d client_id=admin-client \
            -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
            https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
            csi automate ncn kubernetes --action delete-ncn --ncn {{.TargetNcn}} --kubeconfig /etc/kubernetes/admin.conf
  - name: update-bss
    dependencies:
      - wait-for-cfs
      - ensure-nexus-can-start-on-any-node
      - ensure-etcd-pods
      - ensure-pg-pods
    templateRef:
      name: ssh-with-kubeconfig
      template: bash-script-example
    arguments:
      parameters:
        - name: dryRun
          value: "{{ `{{inputs.parameters.dryRun}}` }}"
        - name: scriptContent
          value: |
            export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
            -d client_id=admin-client \
            -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
            https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')
            csi handoff bss-update-param --set metal.no-wipe=0 --limit $(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{.TargetNcn}} 'cat /etc/cray/xname')
{{end}}