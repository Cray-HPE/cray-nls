apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: workflow-template-hello-world-
spec:
  entrypoint: whalesay
  volumes:
    - name: ssh
      hostPath:
        path: /root/.ssh
        type: Directory
    - name: k8s
      hostPath:
        path: /etc/kubernetes
        type: Directory
    - name: user-bin
      hostPath:
        path: /usr/bin
        type: Directory
  templates:
    - name: whalesay
      dag:
        tasks:
          - name: A
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: "echo hello world"
          - name: wait-for-cfs
            dependencies: [A]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    /usr/share/doc/csm/upgrade/1.2/scripts/cfs/wait_for_configuration.sh --xnames x3000c0s4b0n0
          - name: ensure-nexus-can-start-on-any-node
            dependencies: [A]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    workers="$(kubectl get node --selector='!node-role.kubernetes.io/master' -o name | sed -e 's,^node/,,' | paste -sd,)"
                    export PDSH_SSH_ARGS_APPEND="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
                    kubectl get configmap -n nexus cray-precache-images -o json | jq -r '.data.images_to_cache' | while read image; do echo >&2 "+ caching $image"; pdsh -w "$workers" "crictl pull $image" 2>/dev/null; done
          - name: ensure-etcd-pods
            dependencies: [A]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    while [[ "$(kubectl get po -A -l 'app=etcd' | grep -v "Running"| wc -l)" != "1" ]]; do
                        echo "Some etcd pods are not in running state, wait for 5s ..."
                        kubectl get po -A -l 'app=etcd' | grep -v "Running"
                        sleep 5
                    done

                    etcdClusters=$(kubectl get Etcdclusters -n services | grep "cray-"|awk '{print $1}')
                    for cluster in $etcdClusters
                    do
                        numOfPods=$(kubectl get pods -A -l 'app=etcd'| grep $cluster | grep "Running" | wc -l)
                        if [[ $numOfPods -ne 3 ]];then
                            echo "ERROR - Etcd cluster: $cluster should have 3 pods running but only $numOfPods are running"
                            exit 1
                        fi
                    done
          - name: ensure-pg-pods
            dependencies: [A]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    wget -q http://rgw-vip.nmn/ncn-utils/csi;chmod 0755 csi
                    mv csi /usr/local/bin/csi
                    csi pit validate --postgres
          - name: drain
            dependencies:
              [
                wait-for-cfs,
                ensure-nexus-can-start-on-any-node,
                ensure-etcd-pods,
                ensure-pg-pods,
              ]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')

                    csi automate ncn kubernetes --action delete-ncn --ncn ncn-w001 --kubeconfig /etc/kubernetes/admin.conf
          - name: backup-credentials
            dependencies:
              [
                wait-for-cfs,
                ensure-nexus-can-start-on-any-node,
                ensure-etcd-pods,
                ensure-pg-pods,
              ]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    echo "NOT IMPLEMENTED"
          - name: update-bss
            dependencies:
              [
                wait-for-cfs,
                ensure-nexus-can-start-on-any-node,
                ensure-etcd-pods,
                ensure-pg-pods,
              ]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')

                    csi handoff bss-update-param --set metal.no-wipe=0 --limit x3000c0s4b0n0
          - name: wipe-and-rebuild
            dependencies: [update-bss, backup-credentials, drain]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    set -e
                    cat <<'EOF' > wipe_disk.sh
                        lsblk | grep -q /var/lib/sdu
                        sdu_rc=$?
                        vgs | grep -q metal
                        vgs_rc=$?
                        set -e
                        systemctl disable kubelet.service || true
                        systemctl stop kubelet.service || true
                        systemctl disable containerd.service || true
                        systemctl stop containerd.service || true
                        umount /var/lib/containerd /var/lib/kubelet || true
                        if [[ "$sdu_rc" -eq 0 ]]; then
                          umount /var/lib/sdu || true
                        fi
                        for md in /dev/md/*; do mdadm -S $md || echo nope ; done
                        if [[ "$vgs_rc" -eq 0 ]]; then
                          vgremove -f --select 'vg_name=~metal*' || true
                          pvremove /dev/md124 || true
                        fi
                        wipefs --all --force /dev/sd* /dev/disk/by-label/* || true
                        sgdisk --zap-all /dev/sd*
                    EOF
                    chmod +x wipe_disk.sh
                    scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null wipe_disk.sh ncn-w001:/tmp/wipe_disk.sh
                    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ncn-w001 '/tmp/wipe_disk.sh'

                    target_ncn_mgmt_host="ncn-w001-mgmt"
                    VAULT_TOKEN=$(kubectl get secrets cray-vault-unseal-keys -n vault -o jsonpath={.data.vault-root} | base64 -d)
                    IPMI_USERNAME=""
                    IPMI_PASSWORD=""
                    for VAULT_POD in $(kubectl get pods -n vault --field-selector status.phase=Running --no-headers \
                                        -o custom-columns=:.metadata.name | grep -E "^cray-vault-(0|[1-9][0-9]*)$") ; do
                        IPMI_USERNAME=$(kubectl exec -it -n vault -c vault ${VAULT_POD} -- sh -c \
                            "export VAULT_ADDR=http://localhost:8200; export VAULT_TOKEN=`echo $VAULT_TOKEN`; \
                            vault kv get -format=json secret/hms-creds/x3000c0s4b0n0" | 
                            jq -r '.data.Username')
                        # If we are not able to get the username, no need to try and get the password.
                        [[ -n ${IPMI_USERNAME} ]] || continue
                        export IPMI_PASSWORD=$(kubectl exec -it -n vault -c vault ${VAULT_POD} -- sh -c \
                            "export VAULT_ADDR=http://localhost:8200; export VAULT_TOKEN=`echo $VAULT_TOKEN`; \
                            vault kv get -format=json secret/hms-creds/x3000c0s4b0n0" | 
                            jq -r '.data.Password')
                        break
                    done

                    ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H w001_mgmt_host chassis bootdev pxe options=efiboot
                    ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H w001_mgmt_host chassis power off
                    sleep 20
                    ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H w001_mgmt_host chassis power status
                    ipmitool -I lanplus -U ${IPMI_USERNAME} -E -H w001_mgmt_host chassis power on

          - name: wait-for-k8s
            dependencies: [wipe-and-rebuild]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')

                    set +e
                    echo "waiting for k8s: ncn-w001 ..."
                    until csi automate ncn kubernetes --action is-member --ncn ncn-w001 --kubeconfig /etc/kubernetes/admin.conf
                    do
                        sleep 5
                    done
                    # Restore set -e
                    set -e
                    echo "ncn-w001 joined k8s"
          - name: update-bss-no-wipe
            dependencies: [wait-for-k8s]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    export TOKEN=$(curl -k -s -S -d grant_type=client_credentials \
                    -d client_id=admin-client \
                    -d client_secret=`kubectl get secrets admin-client-auth -o jsonpath='{.data.client-secret}' | base64 -d` \
                    https://api-gw-service-nmn.local/keycloak/realms/shasta/protocol/openid-connect/token | jq -r '.access_token')

                    csi handoff bss-update-param --set metal.no-wipe=1 --limit x3000c0s4b0n0
          - name: wait-for-cfs-2-and-more
            dependencies: [wait-for-k8s]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    /usr/share/doc/csm/upgrade/1.2/scripts/cfs/wait_for_configuration.sh --xnames x3000c0s4b0n0
          - name: wait-for-key-pods
            dependencies: [wait-for-k8s]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    while true; do
                      output=$(kubectl get po -A -o wide | grep -e etcd -e speaker | grep ncn-w001 | awk '{print $4}')
                      if [ ! -n "$output" ]; then
                        #
                        # No pods scheduled to start on this node, we are done
                        #
                        break
                      fi
                      set +e
                      echo "$output" | grep -v -e Running -e Completed > /dev/null
                      rc=$?
                      set -e
                      if [[ "$rc" -eq 1 ]]; then
                        echo "All etcd and speaker pods are running on ncn-w001"
                        break
                      fi
                      echo "Some etcd and speaker pods are not running on ncn-w001 -- sleeping for 10 seconds..."
                      sleep 10
                    done
                    scp /root/docs-csm-latest.noarch.rpm ncn-w001:/root/docs-csm-latest.noarch.rpm
                    ssh ncn-w001 "rpm --force -Uvh /root/docs-csm-latest.noarch.rpm"
          - name: goss
            dependencies: [wait-for-cfs-2-and-more]
            templateRef:
              name: ssh-with-kubeconfig
              template: bash-script-example
            arguments:
              parameters:
                - name: message
                  value: |
                    ssh ncn-w001 -t "SW_ADMIN_PASSWORD='!nitial0' GOSS_BASE=/opt/cray/tests/install/ncn goss -g /opt/cray/tests/install/ncn/suites/ncn-upgrade-tests-worker.yaml --vars=/opt/cray/tests/install/ncn/vars/variables-ncn.yaml validate"
