//
//  MIT License
//
//  (C) Copyright 2022 Hewlett Packard Enterprise Development LP
//
//  Permission is hereby granted, free of charge, to any person obtaining a
//  copy of this software and associated documentation files (the "Software"),
//  to deal in the Software without restriction, including without limitation
//  the rights to use, copy, modify, merge, publish, distribute, sublicense,
//  and/or sell copies of the Software, and to permit persons to whom the
//  Software is furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included
//  in all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
//  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//  OTHER DEALINGS IN THE SOFTWARE.
//
// Code generated by MockGen. DO NOT EDIT.
// Source: workflow.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkflowService is a mock of WorkflowService interface.
type MockWorkflowService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowServiceMockRecorder
}

// MockWorkflowServiceMockRecorder is the mock recorder for MockWorkflowService.
type MockWorkflowServiceMockRecorder struct {
	mock *MockWorkflowService
}

// NewMockWorkflowService creates a new mock instance.
func NewMockWorkflowService(ctrl *gomock.Controller) *MockWorkflowService {
	mock := &MockWorkflowService{ctrl: ctrl}
	mock.recorder = &MockWorkflowServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowService) EXPECT() *MockWorkflowServiceMockRecorder {
	return m.recorder
}

// CreateRebuildWorkflow mocks base method.
func (m *MockWorkflowService) CreateRebuildWorkflow(hostnames []string) (*v1alpha1.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRebuildWorkflow", hostnames)
	ret0, _ := ret[0].(*v1alpha1.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRebuildWorkflow indicates an expected call of CreateRebuildWorkflow.
func (mr *MockWorkflowServiceMockRecorder) CreateRebuildWorkflow(hostnames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRebuildWorkflow", reflect.TypeOf((*MockWorkflowService)(nil).CreateRebuildWorkflow), hostnames)
}

// GetWorkflows mocks base method.
func (m *MockWorkflowService) GetWorkflows(ctx *gin.Context) (*v1alpha1.WorkflowList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflows", ctx)
	ret0, _ := ret[0].(*v1alpha1.WorkflowList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflows indicates an expected call of GetWorkflows.
func (mr *MockWorkflowServiceMockRecorder) GetWorkflows(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflows", reflect.TypeOf((*MockWorkflowService)(nil).GetWorkflows), ctx)
}

// InitializeWorkflowTemplate mocks base method.
func (m *MockWorkflowService) InitializeWorkflowTemplate(template []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeWorkflowTemplate", template)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeWorkflowTemplate indicates an expected call of InitializeWorkflowTemplate.
func (mr *MockWorkflowServiceMockRecorder) InitializeWorkflowTemplate(template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeWorkflowTemplate", reflect.TypeOf((*MockWorkflowService)(nil).InitializeWorkflowTemplate), template)
}
