// Code generated by MockGen. DO NOT EDIT.
// Source: workflow.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkflowService is a mock of WorkflowService interface.
type MockWorkflowService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowServiceMockRecorder
}

// MockWorkflowServiceMockRecorder is the mock recorder for MockWorkflowService.
type MockWorkflowServiceMockRecorder struct {
	mock *MockWorkflowService
}

// NewMockWorkflowService creates a new mock instance.
func NewMockWorkflowService(ctrl *gomock.Controller) *MockWorkflowService {
	mock := &MockWorkflowService{ctrl: ctrl}
	mock.recorder = &MockWorkflowServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowService) EXPECT() *MockWorkflowServiceMockRecorder {
	return m.recorder
}

// CreateRebuildWorkflow mocks base method.
func (m *MockWorkflowService) CreateRebuildWorkflow(hostnames []string, dryRun bool, switchPassword string) (*v1alpha1.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRebuildWorkflow", hostnames, dryRun, switchPassword)
	ret0, _ := ret[0].(*v1alpha1.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRebuildWorkflow indicates an expected call of CreateRebuildWorkflow.
func (mr *MockWorkflowServiceMockRecorder) CreateRebuildWorkflow(hostnames, dryRun, switchPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRebuildWorkflow", reflect.TypeOf((*MockWorkflowService)(nil).CreateRebuildWorkflow), hostnames, dryRun, switchPassword)
}

// DeleteWorkflow mocks base method.
func (m *MockWorkflowService) DeleteWorkflow(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow.
func (mr *MockWorkflowServiceMockRecorder) DeleteWorkflow(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockWorkflowService)(nil).DeleteWorkflow), ctx)
}

// GetWorkflows mocks base method.
func (m *MockWorkflowService) GetWorkflows(ctx *gin.Context) (*v1alpha1.WorkflowList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflows", ctx)
	ret0, _ := ret[0].(*v1alpha1.WorkflowList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflows indicates an expected call of GetWorkflows.
func (mr *MockWorkflowServiceMockRecorder) GetWorkflows(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflows", reflect.TypeOf((*MockWorkflowService)(nil).GetWorkflows), ctx)
}

// InitializeWorkflowTemplate mocks base method.
func (m *MockWorkflowService) InitializeWorkflowTemplate(template []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeWorkflowTemplate", template)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeWorkflowTemplate indicates an expected call of InitializeWorkflowTemplate.
func (mr *MockWorkflowServiceMockRecorder) InitializeWorkflowTemplate(template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeWorkflowTemplate", reflect.TypeOf((*MockWorkflowService)(nil).InitializeWorkflowTemplate), template)
}

// RerunWorkflow mocks base method.
func (m *MockWorkflowService) RerunWorkflow(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RerunWorkflow", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RerunWorkflow indicates an expected call of RerunWorkflow.
func (mr *MockWorkflowServiceMockRecorder) RerunWorkflow(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RerunWorkflow", reflect.TypeOf((*MockWorkflowService)(nil).RerunWorkflow), ctx)
}

// RetryWorkflow mocks base method.
func (m *MockWorkflowService) RetryWorkflow(ctx *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryWorkflow", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetryWorkflow indicates an expected call of RetryWorkflow.
func (mr *MockWorkflowServiceMockRecorder) RetryWorkflow(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryWorkflow", reflect.TypeOf((*MockWorkflowService)(nil).RetryWorkflow), ctx)
}
